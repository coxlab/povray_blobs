% ##########################################################################################################
%
%                    ResizeMorphedFacesRatStims
%         
% ##########################################################################################################
%
%  Sum all the views of all the morphed phaces (FACE 1 and 2), find the boundaries, then
%  crop each image (view) to these boundaries. 
%
%   Author: davide
%
%   NOTE:   for the program to work the images must be grayscale !!!!!
%           If the images to convert were generated by using the Python module "morph3d.py" that,
%           in turn, calls a POVray script, then these images are verly likely in RGB format. Therefore,
%           they must be first converted to grayscale using the Photoshop droplet "Convert to grayscale".
%
%   NOTE:   the morphed faces are likely to have been generated using the Python module "morph3d.py". Refefer
%           to its dosumentation to learn how to morph two prototypical faces given as POVray geometrical models.
%
% ##########################################################################################################

function ResizeMorphedFacesRatStims

FlagPlotBoundaries = 1;

% Original rotations chosen for training D1 & D2
% RangeView = -90:15:90;
% New rotations for training D1 & D2 (finer steps)
RangeView = 0; %-90:5:90;
N_view = length(RangeView);
RangeMorph{1} = [-0.5:0.1:0.2];
N_morph(1) = length(RangeMorph{1});
RangeMorph{2} = [0.8:0.1:1.5];
N_morph(2) = length(RangeMorph{2});


% #######################################################################
% Find the boundaries of the image resulting from averaging all views of
% both stimuli
% #######################################################################
IdxImg = 1;
% Loop on all stimuli
for Stim = 1:2
    BaseName = ['FACE_', num2str(Stim) ,'_CamRot_y'];
    % Loop on all ViewPoints
    for v = RangeView 
        % Loop on the morphs
        for m = RangeMorph{Stim}

            % Load image at right viewpoint
            Image2Load = [BaseName, num2str(v), '_morph', num2str(m, '%.1f'), '.png'];
            [img map] = imread( Image2Load );

            % Build stack matrix with all transformaitons
            img_stack(IdxImg,:,:) = img;

            IdxImg = IdxImg+1;
        end; %for m
    end; %for v
end; %for Stim

%  img_av = uint8( squeeze( mean(img_stack,1) ) );
img_av = uint8( squeeze( sum(img_stack,1) ) );
figure;
imshow(img_av);
map=gray(256);
colormap(map);
title('Average image');

% Find image boundaries
[col_bounds, row_bounds] = FindImageBoundingBox_call( img_av, FlagPlotBoundaries );


% #######################################################################
% Crop each image using the boundaries obtained above
% #######################################################################
xmin = col_bounds(1)-2;
ymin = row_bounds(1)-2;
width = col_bounds(2) - col_bounds(1) +4;
height = row_bounds(2) - row_bounds(1) +4;
rect = [xmin ymin width height];

% Loop on all stimuli
for Stim = 1:2
    BaseName = ['FACE_', num2str(Stim) ,'_CamRot_y'];
    % Loop on all ViewPoints
    for v = RangeView 
        % Loop on the morphs
        for m = RangeMorph{Stim}

            % Load image at right viewpoint
            Image2Load = [BaseName, num2str(v), '_morph', num2str(m, '%.1f'), '.png'];
            [img map] = imread( Image2Load );

            img_crop = imcrop(img,rect);
            OutName = ['FACE_N', num2str(Stim) ,'_CamRot_y', num2str(v), '_morph', num2str(m, '%.1f'), '.png'];
            h_f = figure;
            imshow(img_crop);
            imwrite( img_crop, OutName, 'png' ); 

            close(h_f);
        
        end; %for m
    end; %for v
end; %for Stim





